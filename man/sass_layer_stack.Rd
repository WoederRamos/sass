% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{sass_layer_stack}
\alias{sass_layer_stack}
\alias{sass_layer}
\title{Place SASS before and after other SASS}
\usage{
sass_layer_stack(...)

sass_layer(pre = "", post = "", deps = NULL)
}
\arguments{
\item{...}{A collection of \code{\link[=sass_layer]{sass_layer()}}s and/or objects that \code{\link[=as_sass]{as_sass()}} understands.}

\item{pre}{A suitable \code{\link[sass:as_sass]{sass::as_sass()}} \code{input}.}

\item{post}{A suitable \code{\link[sass:as_sass]{sass::as_sass()}} \code{input}.}

\item{deps}{An HTML dependency (or a list of them).}
}
\description{
\code{\link[=sass_layer]{sass_layer()}} defines \code{\link[sass:sass]{sass::sass()}} input(s) to place before and after
existing SASS object(s). To actually surround existing \code{sass} with a
\code{\link[=sass_layer]{sass_layer()}}, use \code{sass_layer_stack(sass, sass_layer())}.
}
\examples{
blue <- list(color = "blue !default")
red <- list(color = "red !default")
green <- list(color = "green !default")

# a sass_layer() by itself is not very useful, it just defines some
# SASS to place before (pre) and after (post)
core <- sass_layer(pre = blue, post = "body { color: $color; }")
core
sass(core)

# However, by stacking sass_layer()s, we have ability to place
# SASS both before (pre) and after (post) some other sass (e.g., core)
# Here we place a red default _before_ the blue default and export the
# color SASS variable as a CSS variable _after_ the core
red_layer <- sass_layer(red, post = ":root{ --color: #{$color}; }")
sass(sass_layer_stack(core, red_layer))
sass(sass_layer_stack(core, red_layer, sass_layer(green)))

}
