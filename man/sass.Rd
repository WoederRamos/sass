% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sass.R
\name{sass}
\alias{sass}
\title{Compile Sass to CSS}
\usage{
sass(
  input = NULL,
  options = sass_options(),
  output = NULL,
  write_attachments = NA,
  cache = sass_cache_get(),
  cache_key_extra = NULL
)
}
\arguments{
\item{input}{Accepts raw Sass, a named list of variables, or a list of raw
Sass and/or named variables. See \code{\link[=as_sass]{as_sass()}} and \code{\link[=sass_import]{sass_import()}} /
\code{\link[=sass_file]{sass_file()}} for more details.}

\item{options}{Compiler options for Sass. Please specify options using
\code{\link[=sass_options]{sass_options()}}.}

\item{output}{Specifies path to output file for compiled CSS. May be a
character string or \code{\link[=output_template]{output_template()}}}

\item{write_attachments}{If the input contains \code{\link[=sass_layer]{sass_layer()}} objects that
have file attachments, and \code{output} is not \code{NULL}, then copy the file
attachments to the directory of \code{output}. (Defaults to \code{NA}, which merely
emits a warning if file attachments are present, but does not write them to
disk; the side-effect of writing extra files is subtle and potentially
destructive, as files may be overwritten.)}

\item{cache}{This can be a directory to use for the cache, a \link{FileCache}
object created by \code{\link[=sass_file_cache]{sass_file_cache()}}, or \code{FALSE} or \code{NULL} for no caching.}

\item{cache_key_extra}{additional information to considering when computing
the cache key. This should include any information that could possibly
influence the resulting CSS that isn't already captured by \code{input}. For
example, if \code{input} contains something like \code{"@import sass_file.scss"} you
may want to include the \code{\link[=file.mtime]{file.mtime()}} of \code{sass_file.scss} (or, perhaps, a
\code{\link[=packageVersion]{packageVersion()}} if \code{sass_file.scss} is bundled with an R package).}
}
\value{
If \code{output = NULL}, the function returns a string value of the
compiled CSS. If \code{output} is specified, the compiled CSS is written to a
file and the filename is returned.

$x }

fib($x - 2) + fib($x - 1); }

body { width: fib(27); }"The first time this runs it will be very slow system.time(sass(fib_sass))But on subsequent calls, it should be very fast

system.time(sass(fib_sass))sass() can be called with cache=NULL; it will be slow

system.time(sass(fib_sass, cache = NULL))Clear the cache sass_cache_get()$reset()

\dontrun{ # Example of disabling cache by setting the default cache to
  NULL.

  # Disable the default cache (save the original one first, so we can
  restore) old_cache <- sass_cache_get() sass_cache_set(NULL) # Will be slow,
  because no cache system.time(sass(fib_sass))

  # Restore the original cache sass_cache_set(old_cache) }
}
\description{
Compile Sass to CSS using LibSass.
}
\section{Caching}{


By default, caching is enabled, meaning that \code{sass()} avoids the possibly
expensive re-compilation of CSS whenever the same \code{options} and \code{input} are
requested. Unfortunately, in some cases, \code{options} and \code{input} alone aren't
enough to determine whether new CSS output must be generated. For example,
changes in local file
\href{https://sass-lang.com/documentation/at-rules/import}{imports} that aren't
captured through \code{\link[=sass_file]{sass_file()}}/\code{\link[=sass_import]{sass_import()}}, may lead to a
false-positive caching. For this reason, developers are encouraged to
capture such information in \code{cache_key_extra} (possibly with
\code{packageVersion('myPackage')} if shipping Sass with a package), and users
should consider disabling the cache altogether during local development
with \code{sass_cache_set(NULL)}.
}

\section{Cache directory}{


The default cache's (i.e., \code{sass_file_cache()}) uses
\code{sass_cache_context_dir()} to determine an appropriate caching directory
based on the current context. If outside of a Shiny app, it uses the user's
caching directory (i.e., \code{rappdirs::user_cache_dir("R-sass")}). Otherwise,
it looks for a special app sub-directory named \verb{cache/}, and if it exists,
it uses a directory named \verb{cache/sass/} to store the cache. This directory
is not created (only used) when running a Shiny app locally, but when
running Connect or Shiny Server, it \emph{will} create a \verb{cache/sass/}
subdirectory, so that the cache is scoped to the application and will not
interfere with another application's cache.
}

\section{Cache size}{


The default cache's (i.e., \code{sass_file_cache()}) has a max size of 40 MB and
a max age of one week. See \code{\link[=sass_file_cache]{sass_file_cache()}} and \link{FileCache} for control
over these size limitations and for implementation details.
}

\seealso{
\url{http://sass-lang.com/guide}
}
